apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
//apply plugin: "com.github.johnrengelman.shadow"

int mcVersion = 1

preprocess {
	mcVersion = vars.get()["MC"] as int
	tabIndentation = true

}

repositories {
	maven {
		url 'https://masa.dy.fi/maven'
	}
	maven {
		url 'https://jitpack.io'
	}
	maven {
		url 'https://www.cursemaven.com'
	}
	maven{
		url 'https://maven.fabricmc.net/'
	}
}


configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
	api.extendsFrom includeApi
	shadowInclude
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "carpet:fabric-carpet:${project.carpet_core_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include implementation("net.bytebuddy:byte-buddy-agent:1.14.0")
}

loom {
	runConfigs.all {
		ideConfigGenerated = true
		runDir '../../run'
		vmArgs '-Dmixin.debug.export=true'
	}
}

//shadowJar {
//	archiveClassifier = "all-dev"
//	configurations = [project.configurations.shadowInclude]
//	minimize()
//	from("LICENSE") {
//		rename { "${it}_${project.archivesBaseName}" }
//	}
//	exclude "/kotlin*"
//	relocate "net.bytebuddy", "icu.takeneko.deps.bytebuddy"
//}
//
//task("remapShadowJar", type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
//	remapperIsolation = true
//	input = shadowJar.archiveFile
//	archiveFileName = shadowJar.archiveFileName.get().replaceAll("-dev\\.jar\$", ".jar")
//	addNestedDependencies = true
//}




remapJar {
	remapperIsolation = true
}

if (mcVersion >= 11800) {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

group = project.maven_group
archivesBaseName = project.archives_base_name + "-v${properties["mod_version"]}-mc${project.minecraft_version}"

processResources {
	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		def valueMap = [
				"id": project.mod_id,
				"name": project.mod_name,
				"version": project.mod_version,
				"carpet_dependency": project.carpet_dependency,
				"minecraft_dependency": project.minecraft_dependency,
				"minecraft_version_id": project.minecraft_version.replace(".","_")
		]
		expand valueMap
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

java {
	withSourcesJar()
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}
